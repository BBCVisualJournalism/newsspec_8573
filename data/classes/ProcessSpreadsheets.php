<?php

iRequire::one('models/Team', 'models/League');
/*
    This class handles the processing the spreadsheet .

    It first converts the spreadsheet into a CSV file, then traverses over the CSV file
    creating Team and League objects, these objects are then added to an array and returned.
*/
class ProcessSpreadsheets{

    private $tempTeamCSV = 'team.csv'; /* Where the temp CSV file will be stored */
    private $tempLeagueCSV = 'league.csv'; /* Where the temp CSV file will be stored */
    private $teamsXls;
    private $leaguesXls;

    private $teamsObject = null; /* Array containing all the Team objects */
    private $leaguesObject = null; /* Array containing all the League objects */

    /*
        Process XLS contructor
        @param $xlsFile should be a relative path to the XLS file
    */
    public function __construct($teamsFile, $leaguesFile){
        $this->teamsXls = $teamsFile;
        $this->leaguesXls = $leaguesFile;
    }

    /*
        Converts the XLS into CSV, then parses the CSV into an array.
     */
    private function process(){
        /* CLEAN UP */
        $this->deleteTemp();

        /* CONVERT TO CSV'S SO CAN BE READ */
        $this->convertToCSV($this->teamsXls, $this->tempTeamCSV);
        $this->convertToCSV($this->leaguesXls, $this->tempLeagueCSV);

        /* Parse CSV's into an arrays of usable data */
        $this->parseTeamsCSV($this->tempTeamCSV);
        $this->parseLeaguesCSV($this->tempLeagueCSV);


        /* CLEAN UP TEMP */
        $this->deleteTemp();
    }

    /*
        Removes the temp CSV files used for the parsing process.
     */
    private function deleteTemp(){
        if(file_exists($this->tempTeamCSV)){
            unlink($this->tempTeamCSV);
        }
        if(file_exists($this->tempLeagueCSV)){
            unlink($this->tempLeagueCSV);
        }
    }

    /*
        Converts the XLS file into a readable CSV file.

        DISABLES ERROR REPORTING TEMPORARILY BECAUSE THE SPREADSHEET PROCESSING THROWS WARNINGS
    */
    private function convertToCSV($xlsFile, $output){

        /* Disable reporting while processing spreadsheet */
        $errorReportNo = error_reporting();
        error_reporting(0);

        $fileType = PHPExcel_IOFactory::identify($xlsFile);
        $objReader = PHPExcel_IOFactory::createReader($fileType);
     
        $objReader->setReadDataOnly(true);   
        $objPHPExcel = $objReader->load($xlsFile);    
     
        $objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'CSV');
        $objWriter->save($output);

        /* Turn reporting back to normal */
        error_reporting($errorReportNo);
    }

    /*
        Loads the CSV file created by convertToCSV() and parses it into an array of
        Team objects.

        $this->teamsObject contains the array generated by this function
    */
    private function parseTeamsCSV($csvFile){
        $this->teamsObject = new stdClass();

        $csvHandle = fopen($csvFile, "r");
        $count = 0;

        $firstRow;

        while (!feof($csvHandle) ) {
            $count++;

            /* Get each line of the CSV file */
            $dataRow = fgetcsv($csvHandle);

            /* Ignore first line */
            if ($count <= 1) { $firstRow = $dataRow; continue; }

            /* Convert the data into a Team object and append to array */
            if($dataRow[0]){

                $newItem = $this->csvRowToTeam($dataRow);
                $prettyName = $newItem->getPrettyName();
                $this->teamsObject->{$prettyName} = $newItem;
            }

        }

        fclose($csvHandle);
    }
    /*
        Loads the CSV file created by convertToCSV() and parses it into an array of
        League objects.

        $this->leaguesObject contains the array generated by this function
    */
    private function parseLeaguesCSV($csvFile){
        $this->leaguesObject = new stdClass();

        $csvHandle = fopen($csvFile, "r");
        $count = 0;

        $firstRow;

        while (!feof($csvHandle) ) {
            $count++;

            /* Get each line of the CSV file */
            $dataRow = fgetcsv($csvHandle);

            /* Ignore first line */
            if ($count <= 1) { $firstRow = $dataRow; continue; }

            /* Convert the data into a Team object and append to array */
            if($dataRow[0]){
                $newItem = $this->csvRowToLeague($dataRow);
                $prettyName = $newItem->getPrettyName();
                $this->leaguesObject->{$prettyName} = $newItem;
            }

        }

        fclose($csvHandle);
    }

    function prettyUrl($url) {
        $clean = preg_replace("/[^a-zA-Z0-9\/_|+ -]/", '', $url);
        $clean = strtolower(trim($clean, '-'));
        $clean = preg_replace("/[\/_|+ -]+/", '-', $clean);
        return $clean;
    }

    /*
        ======================================================
        = IF SPREADSHEET FORMAT CHANGES, EDIT THIS FUNCTION. =
        ======================================================
    */
    /*
        Converts a line from parseCSV() into a team object.
    */
    private function csvRowToTeam($row){
        $team = new Team();

        $team->setName($row[0]);
        $team->setShortName($row[1]);
        $team->setPrettyName($this->prettyUrl($row[0]));
        $team->setLeague($row[2]);
        $team->setPrettyLeague($this->prettyUrl($row[2]));
        $team->setCheapSeason($row[3]);
        $team->setDearSeason($row[4]);
        $team->setCheapTicket($row[5]);
        $team->setDearTicket($row[6]);
        $team->setAdultShirt($row[7]);
        $team->setJuniorShirt($row[8]);
        $team->setDayOut($row[9]);
        $team->setProgramme($row[10]);
        $team->setPie($row[11]);
        $team->setTea($row[12]);
        $team->setHomeGoals2013($row[13]);
        $team->setCheapSeason2013($row[14]);
        $team->setGoalCost($row[15]);
        $team->setCheapestMatchdayTicket2011($row[16]);
        $team->setPie2011($row[17]);
        $team->setTea2011($row[18]);
        $team->setProgramme2011($row[19]);

        return $team;
    }
    /*
        Converts a line from parseCSV() into a league object.
    */
    private function csvRowToLeague($row){
        $league = new League();

        $league->setName($row[0]);
        $league->setPrettyName($this->prettyUrl($row[0]));
        $league->setHomeGames($row[1]);
        $league->setNeedThe($row[2]);

        /* Calculate the averages */
        $averageKitCost = $this->calcAvgKitCostFor($league);
        $league->setAvgKitCost($averageKitCost);

        return $league;
    }

    /* Returns the average kit cost for a given league */
    private function calcAvgKitCostFor($league){
        if($this->teamsObject==null){
            throw new Exception("Team data needs to be parsed before calcualting kit cost");
        }

        $leagueName = $league->getPrettyName();

        $kitTotal = 0;
        $noTeamsWithKitPrice = 0; // Holds the number of teams that have kit data.

        foreach($this->teamsObject as $team){
            if( ($team->getPrettyLeague() == $leagueName) && ($team->getAdultShirt()) ){
                $noTeamsWithKitPrice++;
                $kitTotal += $team->getAdultShirt();
            }
        }

        return ($noTeamsWithKitPrice>0) ? ((double)$kitTotal/$noTeamsWithKitPrice) : null;

    }


    /*
        Returns an array of team objects (generated from the XLS file).
        If the XLS as not already been processed, this will begin by processing
        the file.

        @return array of Teams 
    */
    public function getTeamsObject(){
        if(!$this->teamsObject){
            $this->process();
        }

        if(count(get_object_vars($this->teamsObject))<=0){
            throw new Exception("Failed to extract data from XLS file.");   
        }

        return $this->teamsObject;

    }
    /*
        Returns an array of League objects (generated from the XLS file).
        If the XLS as not already been processed, this will begin by processing
        the file.

        @return array of Leagues 
    */
    public function getLeaguesObject(){
        if(!$this->leaguesObject){
            $this->process();
        }

        if(count(get_object_vars($this->leaguesObject))<=0){
            throw new Exception("Failed to extract data from XLS file.");   
        }

        return $this->leaguesObject;

    }

}